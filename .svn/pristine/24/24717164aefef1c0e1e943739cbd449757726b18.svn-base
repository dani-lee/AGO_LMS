package com.one.controller.user.myClass;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.josephoconnell.html.HTMLInputFilter;
import com.one.command.ExtReportCommand;
import com.one.command.MemberCriteria;
import com.one.command.NoticeRegistCommand;
import com.one.dto.AttachVO;
import com.one.dto.ExtReportVO;
import com.one.dto.FinishedClassVO;
import com.one.dto.IntReportVO;
import com.one.dto.MemberVO;
import com.one.dto.NoticeVO;
import com.one.dto.ClassVO.ClassReviewVO;
import com.one.service.CommonService;
import com.one.service.FinishedClassService;
import com.one.utils.GetAttachesFromMultipartFileAdapter;

@Controller
@RequestMapping("/user/myClass/clsFinished")
public class clsFinishedController {
	
	@Autowired
	private FinishedClassService finishedClassService;
	
	@Autowired
	private CommonService commonService;
	
	@Resource(name="extReportCertificate")
	private String fileUploadPath;
	
	@RequestMapping("/list.do")
	public ModelAndView listForclsFinished(@RequestParam(value = "sortType", defaultValue="", required = false) String sortType, ModelAndView mnv, MemberCriteria mCri, HttpSession session) throws Exception {
		String url = "user/myClass/clsFinished/list";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		
		mCri.setMemEmail(loginUser.getMemEmail());
		
		if(mCri.getSortType().equals("ext") || sortType.equals("ext")) {
			dataMap = finishedClassService.getExtFinishedClassList(mCri, loginUser.getMemId());
		}else {
			dataMap = finishedClassService.getIntFinishedClassList(mCri, loginUser.getMemId());
		}
		
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping("/detail.do")
	public String detailForclsFinished() throws Exception {
		String url = "user/myClass/clsFinished/detail";

		return url;
	}

	@RequestMapping("/intReportForm.pop")
	public ModelAndView intReportForm(ModelAndView mnv, @RequestParam("memClNo") int memClNo) throws Exception {
		String url = "user/myClass/clsFinished/reportForm";
		
		IntReportVO report = finishedClassService.getIntReportInsertForm(memClNo);
		
		mnv.addObject("report", report);
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping(value="/intReportRegist", method=RequestMethod.POST)
	public String intReportRegist(IntReportVO intReport) throws Exception {
		String url = "user/myClass/clsFinished/regist_success";
		
		finishedClassService.registIntReport(intReport);
		
		return url;
	}
	
	@RequestMapping("/extReportForm.pop")
	public ModelAndView extReportForm(ModelAndView mnv, @RequestParam("extCode") String extCode, MemberCriteria mCri, HttpSession session) throws Exception {
		String url = "user/myClass/clsFinished/extReportForm"; //외부교육 수료증도 첨부해야됨...
		
		
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		String positionName = commonService.getCodeName1ByCommonCode(loginUser.getPositionId());
		
		mCri.setMemEmail(loginUser.getMemEmail());
		Map<String, Object> dataMap = finishedClassService.getExtFinishedClassList(mCri, loginUser.getMemId());
		
		ExtReportVO extReport = new ExtReportVO();
		
		List<FinishedClassVO> extClassList = (List<FinishedClassVO>) dataMap.get("extClassList");
		for(FinishedClassVO finished : extClassList) {
			if(finished.getExtCode().equals(extCode)) {
				extReport.setClName(finished.getExtClName());
			}
		}
		
		extReport.setMemName(loginUser.getMemName());
		extReport.setDpName(loginUser.getDpId());
		extReport.setPositionName(positionName);
		
		
		mnv.addObject("extReport",extReport);
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping(value="/extReportRegist.do", method = RequestMethod.POST, produces="text/plain;charset=utf-8")
	public String extReportRegist(ExtReportCommand registReq, RedirectAttributes rttr) throws Exception{
		String url = "user/myClass/clsFinished/regist_success";

		ExtReportVO extReport = registReq.getExtReportVO();
		System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       " + registReq.getAttachDoc());
		System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    size   " + registReq.getAttachDoc().size());
		List<AttachVO> attachList = GetAttachesFromMultipartFileAdapter.save(registReq.getAttachDoc(), fileUploadPath);
		System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       " + attachList.get(0).getFileRealName());
		extReport.setAttachDoc(attachList.get(0).getFileRealName());
		
		//XSS 적용
		extReport.setEduContent(HTMLInputFilter.htmlSpecialChars(extReport.getEduContent()));
		extReport.setEduReview(HTMLInputFilter.htmlSpecialChars(extReport.getEduReview()));
		
		finishedClassService.registExtReport(extReport);
		
		return url;
	}
	
	
	@RequestMapping("/registClsReviewForm.pop")
	public ModelAndView registClsReviewForm(ModelAndView mnv, @RequestParam("memClNo") int memClNo) throws Exception {
		String url = "user/myClass/clsFinished/registClsReviewForm";
		
		IntReportVO report = finishedClassService.getIntReportInsertForm(memClNo);
		
		mnv.addObject("report", report);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping(value="/registClsReview", method=RequestMethod.POST)
	public String registClsReview(ClassReviewVO classReview, HttpSession session) throws Exception {
		String url = "user/myClass/clsFinished/reviewRegist_success";
		
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		
		classReview.setMemId(loginUser.getMemId());
		
		finishedClassService.registClassReview(classReview);
		
		return url;
	}
}








































