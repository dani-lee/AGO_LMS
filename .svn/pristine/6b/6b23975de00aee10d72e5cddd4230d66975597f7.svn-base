package com.one.service.impl;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.one.command.MemberClassCommand;
import com.one.dao.CommonDAO;
import com.one.dao.JMSClassDAO;
import com.one.dto.MemberClVO;
import com.one.dto.ClassVO.ClassChapterVO;
import com.one.dto.ClassVO.ClassDocumentVO;
import com.one.dto.ClassVO.ClassListVO;
import com.one.dto.ClassVO.ClassReviewVO;
import com.one.service.JMSClassService;

public class JMSClassServiceImpl implements JMSClassService {
	private JMSClassDAO jmsClassDAO;
	private CommonDAO commonDAO;

	public void setJmsClassDAO(JMSClassDAO jmsClassDAO) {
		this.jmsClassDAO = jmsClassDAO;
	}

	public void setCommonDAO(CommonDAO commonDAO) {
		this.commonDAO = commonDAO;
	}

	@Override
	public Map<String, Object> selectOpcl(int opcl) throws SQLException {
		Map<String, Object> dataMap = null;

		ClassListVO claz = getClassList(opcl);
		String avg = jmsClassDAO.selectAvgReviewScoreByOpcl(opcl);

		dataMap = new HashMap<String, Object>();
		dataMap.put("claz", claz);
		dataMap.put("avg", avg);
		return dataMap;
	}

	@Override
	public ClassListVO selectClass(int opcl) throws SQLException {
		ClassListVO claz = null;
		claz = getClassList(opcl);
		return claz;
	}

	@Override
	public List<ClassChapterVO> selectChapter(int opcl, String memEmail) throws SQLException {
		List<ClassChapterVO> chapList = null;
		chapList = jmsClassDAO.selectClChapterListByOpcl(opcl);
		for (ClassChapterVO chap : chapList) {
			if (chap.getClChapName().contentEquals("시험")) {
				if(chapList.get(chapList.size()-1).getClChapName().contentEquals("시험")){
					chap.setfTestCheck(true);
				}else {
					chap.setmTestCheck(true);
				}
			}
			MemberClVO clChap = new MemberClVO();
			clChap.setMemEmail(memEmail);
			clChap.setOpcl(opcl);
			clChap.setClChap(chap.getClChapNum());
			chap.setMemFinishChk(jmsClassDAO.checkMemChap(clChap));
			MemberClVO memChap = jmsClassDAO.getMemChap(clChap);
			
			if(memChap != null) {
				chap.setProgChap(memChap.getProgChap());
			}
		}
		return chapList;
	}

	@Override
	public List<ClassDocumentVO> selectDocument(int opcl) throws SQLException {
		List<ClassDocumentVO> docList = null;
		docList = jmsClassDAO.selectClDocListByOpcl(opcl);
		return docList;
	}

	@Override
	public List<ClassReviewVO> selectReview(int opcl) throws SQLException {
		List<ClassReviewVO> reviewList = null;
		ClassListVO claz = jmsClassDAO.selectClassAndOpClByOpcl(opcl);

		reviewList = jmsClassDAO.selectClReviewListByOpcl(opcl);

		for (ClassReviewVO review : reviewList) {
			review.setClCode(claz.getClCode());
			review.setClName(claz.getClName());

			review.setMemName(jmsClassDAO.selectMemberByMemId(review.getMemId()).getMemName());
		}
		return reviewList;
	}

	public ClassListVO getClassList(int opcl) throws SQLException {
		ClassListVO claz = null;
		claz = jmsClassDAO.selectClassAndOpClByOpcl(opcl);

		claz.setClFormat(commonDAO.selectCommonByCommonCode(claz.getClFormat()).getCodeName1());
		claz.setClCate(commonDAO.selectCommonByCommonCode(claz.getClCate()).getCodeName1());
		claz.setStudyDate(commonDAO.selectCommonByCommonCode(claz.getStudyDate()).getCodeName1());
		claz.setClDivision(commonDAO.selectCommonByCommonCode(claz.getClDivision()).getCodeName1());

		if (!claz.getStudyDate().equals("제한없음")) {
			claz.setStudyDate("신청일로부터 " + claz.getStudyDate() + "일");
		}

		return claz;
	}

	@Override
	public MemberClVO getMemChap(MemberClVO memberCL) throws SQLException {
		MemberClVO memChap = jmsClassDAO.getMemChap(memberCL);
		return memChap;
	}

	@Override
	public void dropClass(int opcl, String memEmail) throws SQLException {
		MemberClVO memClVO = new MemberClVO();
		memClVO.setOpcl(opcl);
		memClVO.setMemEmail(memEmail);
		
		jmsClassDAO.deleteStudyingClass(memClVO);
		
	}
}
