package com.one.dao.impl;


import java.sql.SQLException;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;

import com.one.command.Criteria;
import com.one.command.MemberClassCriteria;
import com.one.command.MemberStudyClassCommand;
import com.one.command.ReportCommand;
import com.one.dao.MyClassDAO;
import com.one.dto.DepartmentVO;
import com.one.dto.MemberClVO;
import com.one.dto.ClassVO.ClassIntr;

public class MyClassDAOImpl implements MyClassDAO {
	
	private SqlSession session;
	public void setSession(SqlSession session) {
		this.session = session;
	}
	@Override
	public List<MemberStudyClassCommand> selectStudyClassList(String memEmail) throws SQLException {
		RowBounds rowBounds = new RowBounds(0, 8);
		return session.selectList("MyClass-Mapper.selectStudyClassList", memEmail, rowBounds);
	}
	@Override
	public List<ReportCommand> selectFinishClass(String memEmail) throws SQLException {
		
		return session.selectList("MyClass-Mapper.selectFinishClassList", memEmail);
	}
	@Override
	public ReportCommand selectReportClass(int opcl) throws SQLException {
		
		return session.selectOne("MyClass-Mapper.selectReportClass", opcl);
	}
	@Override
	public int selectFinishClassCount(String memEmail) throws SQLException {
		
		return session.selectOne("MyClass-Mapper.selectFinishClassCount", memEmail);
	}
	@Override
	public int selectStudyClassCount(String memEmail) throws SQLException {
		
		return session.selectOne("MyClass-Mapper.selectStudyClassCount", memEmail);
	}
	@Override
	public List<ClassIntr> selectIntrClass(String memEmail) throws SQLException {
		
		return session.selectList("MyClass-Mapper.selectIntrClassList", memEmail);
	}
	@Override
	public List<DepartmentVO> selectDepartmentClassList() throws SQLException {
		return session.selectList("Class-Mapper.selectDepartmentClassList");
	}
	@Override
	public List<MemberStudyClassCommand> selectListStudyingClass(Criteria cri) throws SQLException {
		int offset = cri.getStartRowNum();
		cri.setPerPageNum(5);
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);
		
		List<MemberStudyClassCommand> myClassList = session.selectList("MyClass-Mapper.selectListStudyingClass",cri , rowBounds); 
		return myClassList;
	}
	@Override
	public int selectListStudyingClassCount(Criteria cri) throws SQLException {
		int totalCount = session.selectOne("MyClass-Mapper.selectListStudyingClassCount",cri);
		
		return totalCount;
	}
	@Override
	public void updateMemCLByQrScan(MemberClVO memberCL) throws SQLException {
		session.update("MyClass-Mapper.updateMemCLByQrScan", memberCL);
	}
	@Override
	public void insertMemChap(MemberClVO memberCL) throws SQLException {
		session.update("MyClass-Mapper.MemberClVO",memberCL);
	}
	@Override
	public List<MemberClVO> selectMemClListByYear(MemberClassCriteria cri) throws SQLException {
		int offset = cri.getStartRowNum();
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);
		List<MemberClVO> memberClassList = session.selectList("MyClass-Mapper.selectMemClListByYear", cri, rowBounds);
		return memberClassList;
	}
	@Override
	public int selectMemClListByYearCnt(String memId) throws SQLException {
		int totalCount = session.selectOne("MyClass-Mapper.selectMemClListByYearCnt",memId);
		return totalCount;
	}

	
}
