package com.one.controller.user.myClass;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.one.command.MemberClassCommand;
import com.one.command.MemberCriteria;
import com.one.dto.MemberClVO;
import com.one.dto.MemberVO;
import com.one.dto.ClassVO.ClassChapterVO;
import com.one.dto.ClassVO.ClassDocumentVO;
import com.one.dto.ClassVO.ClassIntr;
import com.one.dto.ClassVO.ClassListVO;
import com.one.dto.ClassVO.ClassReviewVO;
import com.one.service.ClassService;
import com.one.service.JMSClassService;
import com.one.service.MyClassService;
import com.one.service.UserClassService;

@Controller
@RequestMapping("/user/myClass")
public class clsStudyingController {

	@Autowired
	private MyClassService service;
	@Autowired
	private UserClassService userService;
	@Autowired
	private ClassService classService;

	@Autowired
	private JMSClassService jmsClassService;

	@Resource(name = "classUploadPath")
	private String picturePath;
	
	@RequestMapping(value = "/main.do", method = RequestMethod.GET)
	public ModelAndView main(ModelAndView mnv, HttpSession session) throws SQLException {
		String url = "/user/myClass/myClassDash";

		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		Map<String, Object> dataMap = service.selectMyClassMain(loginUser.getMemEmail());
		dataMap.put("credit", loginUser.getMemCredit());
		System.out.println("size -------------------------------- " + dataMap.get("memberClassSize"));
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping(value = "/bookmark", method = RequestMethod.POST)
	public ResponseEntity<String> bookmark(int opcl, Boolean markState, HttpSession session) throws Exception {
		ResponseEntity<String> entity = null;
		ClassIntr intr = new ClassIntr();
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		/* System.out.println("---------------------"+opcl+","+loginUser.getMemEmail()); */

		intr.setMemEmail(loginUser.getMemEmail());
		intr.setOpcl(opcl);
		String result = "success";
		userService.updateBookmark(intr, markState);

		entity = new ResponseEntity<String>(result, HttpStatus.OK);

		return entity;

	}

	@RequestMapping(value = "/regist", method = RequestMethod.POST)
	public ResponseEntity<String> regist(int opcl, String endDay, HttpSession session) throws Exception {
		ResponseEntity<String> entity = null;
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		MemberClassCommand memberClass = new MemberClassCommand();
		memberClass.setMemEmail(loginUser.getMemEmail());
		memberClass.setOpcl(opcl);
		if (!endDay.equals("제한없음")) {
			memberClass.setEndDay(Integer.parseInt(endDay));
		}
		userService.insertMemberClass(memberClass);
		String result = "success";
		entity = new ResponseEntity<String>(result, HttpStatus.OK);

		return entity;

	}

	@RequestMapping("/clsStudying/list.do")
	public ModelAndView listForclsStudying(MemberCriteria cri, HttpSession session, ModelAndView mnv) throws Exception {
		String url = "/user/myClass/clsStudying/list";
		MemberVO member = (MemberVO)session.getAttribute("loginUser");
		
		cri.setMemEmail(member.getMemEmail());
		cri.setPerPageNum(5);
		
		Map<String, Object> dataMap = service.selectListMyStudyingClass(cri);

		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping(value = "/getPicture", produces = "text/plain;charset=utf-8")
	public ResponseEntity<byte[]> getPicture(String picture) throws IOException {
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;
		String imgPath = picturePath;
		try {

			in = new FileInputStream(new File(imgPath, picture));
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), HttpStatus.CREATED);
		} finally {
			in.close();
		}

		return entity;
	}

	@RequestMapping(value = "/clsStudying/detail.do", method = RequestMethod.GET)
	public ModelAndView detailForclsStudying(int opcl, HttpSession session, ModelAndView mnv) throws Exception {
		String url = "/user/myClass/clsStudying/detail";

		Map<String, Object> dataMap = jmsClassService.selectOpcl(opcl);

		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		return mnv;
	}

	@ResponseBody
	@RequestMapping(value = "/clsStudying/classInfo.do", method = RequestMethod.GET)
	public ResponseEntity<Object> classInfo(int opcl) throws Exception {
		ResponseEntity<Object> entity = null;

		try {
			
			ClassListVO claz = jmsClassService.selectClass(opcl);

			entity = new ResponseEntity<Object>(claz, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<Object>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}

	@ResponseBody
	@RequestMapping(value = "/clsStudying/classChap.do", method = RequestMethod.GET)
	public ResponseEntity<List<ClassChapterVO>> classChap(int opcl, HttpSession session) throws Exception {
		ResponseEntity<List<ClassChapterVO>> entity = null;
		try {
			List<ClassChapterVO> chapList = jmsClassService.selectChapter(opcl, ((MemberVO)session.getAttribute("loginUser")).getMemEmail());
			entity = new ResponseEntity<List<ClassChapterVO>>(chapList, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<List<ClassChapterVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}

	@ResponseBody
	@RequestMapping(value = "/clsStudying/classDoc.do", method = RequestMethod.GET)
	public ResponseEntity<List<ClassDocumentVO>> classDoc(int opcl) throws Exception {
		ResponseEntity<List<ClassDocumentVO>> entity = null;

		try {
			List<ClassDocumentVO> docList = jmsClassService.selectDocument(opcl);

			entity = new ResponseEntity<List<ClassDocumentVO>>(docList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<ClassDocumentVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}

	@ResponseBody
	@RequestMapping(value = "/clsStudying/classReview.do", method = RequestMethod.GET)
	public ResponseEntity<List<ClassReviewVO>> classReview(int opcl) throws Exception {
		ResponseEntity<List<ClassReviewVO>> entity = null;

		try {
			List<ClassReviewVO> reviewList = jmsClassService.selectReview(opcl);

			entity = new ResponseEntity<List<ClassReviewVO>>(reviewList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<ClassReviewVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}

	@RequestMapping("/clsStudying/clsPlay.do")
	public ModelAndView clsPlay(String clChapVideo,ModelAndView mnv) throws Exception {
		String url = "user/myClass/clsStudying/clsPlay";
		
		mnv.addObject("clChapVideo", clChapVideo);
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping(value="/clsStudying/registMemChap.do", method=RequestMethod.POST)
	public ResponseEntity<String> registMemChap(@RequestBody MemberClVO memberCL) throws SQLException{
		ResponseEntity<String> entity = null;
		
		MemberClassCommand command = new MemberClassCommand();
		command.setOpcl(memberCL.getOpcl());
		command.setMemEmail(memberCL.getMemEmail());
		
		int memClNo = service.getmemClNoByOpcl(command);
		memberCL.setMemClNo(memClNo);
		
		try {
			MemberClVO chkMemChap = jmsClassService.getMemChap(memberCL);
			double progRate;
			
			//전체챕터 수
			int chapterCnt = service.getClChapterCnt(memberCL.getClCode()) * 100;
			progRate = Math.round(((double)memberCL.getProgChap() / chapterCnt) * 100);
 			memberCL.setProgRate((int)progRate);
 			
			if(chkMemChap != null) {
				service.modifyMemChap(memberCL);
				service.modifyMemCLProgRate(memberCL);
			}else {
				service.regisetMemChap(memberCL);
				service.modifyMemCLProgRate(memberCL);
			}
			entity = new ResponseEntity<String>("success", HttpStatus.OK);

		} catch (SQLException e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@RequestMapping("/clsStudying/QRCheck.do")
	public String qrCheck() throws Exception {
		String url = "user/myClass/clsStudying/QRCheck";

		return url;
	}

	@RequestMapping("/clsStudying/checkAttd.do")
	public String checkAttd(MemberClVO memberCL, RedirectAttributes rttr) throws Exception{
		String url = "redirect:/user/myClass/clsStudying/QRCheck.do";

		List<ClassListVO> classMemList = classService.getClassMemListByOpcl(memberCL.getOpcl());
		for(ClassListVO classList : classMemList) {
			if(classList.getMemId().contains(memberCL.getMemId())) {
				memberCL.setMemEmail(classList.getMemEmail());
				
				service.modifyMemCLByQrScan(memberCL);

				rttr.addFlashAttribute("chk","success");
				rttr.addFlashAttribute("message", classList.getMemName() +"님, "+ classList.getClName() +"강의 출석완료되었습니다.");
			}else {
				rttr.addFlashAttribute("chk","fail");
				rttr.addFlashAttribute("message", classList.getClName() +" 강의를  수강신청해주세요.");
			}
		}

		return url;
	}
}
